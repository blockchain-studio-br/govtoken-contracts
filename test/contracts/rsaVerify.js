import chai, {expect} from 'chai';
import { ethers, utils } from 'ethers';
import { CPF, CNPJ } from 'cpf_cnpj';
import MD5 from 'crypto-js/md5';
import CryptoJS from 'crypto-js';
import {createMockProvider, deployContract, getWallets, solidity} from 'ethereum-waffle';

import SolRSA from '../../build/SolRsaVerify';

chai.use(solidity);

describe('RSA test', async () => {
	let provider;
	let accounts;
	let wallet;
	let anotherWallet;
	let contract;
	let totalSupply;

	beforeEach(async () => {
		provider = await createMockProvider({ gasLimit: 800000000 });
		accounts = await getWallets(provider);
		[wallet, anotherWallet] = accounts;	
		contract = await deployContract(wallet, SolRSA, [], { gasLimit: 10000000 });
	});

	it("test values", async () => {
		const e   = "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001";
        const Msg = "0x68656c6c6f20776f726c64";
        const S   = "0x079bed733b48d69bdb03076cb17d9809072a5a765460bc72072d687dba492afe951d75b814f561f253ee5cc0f3d703b6eab5b5df635b03a5437c0a5c179309812f5b5c97650361c645bc99f806054de21eb187bc0a704ed38d3d4c2871a117c19b6da7e9a3d808481c46b22652d15b899ad3792da5419e50ee38759560002388";
        const nn  = "0xDF3EDDE009B96BC5B03B48BD73FE70A3AD20EAF624D0DC1BA121A45CC739893741B7CF82ACF1C91573EC8266538997C6699760148DE57E54983191ECA0176F518E547B85FE0BB7D9E150DF19EEE734CF5338219C7F8F7B13B39F5384179F62C135E544CB70BE7505751F34568E06981095AEEC4F3A887639718A3E11D48C240D";

        let result = await contract.pkcs1Sha256VerifyRaw(Msg,S,e,nn);

		expect(result).to.eq(0);
	});

	it("test raul values", async () => {
		const e   = "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001";
        const Msg = "0x68656c6c6f20776f726c64";
        const S   = "0x2920c459a0dd65305c25c249b53c4c33438ce21cf362c1c62c9508f7f4f5551a712e266100b10f843832697002a67ea4c8efb9bc2264d80e0964c9c06004e629b4ec77ffefe6a929e044a1c1d3ecd23fc54359cac90179bb1acbc45f6816e41afb5ce8960d4a0aec158e3733bd3859a727c5dbc977c8c762d3043d949176d789";
        const nn  = "0xE15568ECDF47FAA2AAD9B7D2777025F972297D2D64D8A190E700CBA133DC2C26CC4CD62EC728E757891CDC1F770E02EB55746B26EE2FCF8275614CA9A73DCF85E9F2BF5652C853440837AD1A5C6659E099E2E3CED568722FF659268CC35D0F9774A78A5C013F1DC1999873EF8842F6AF3AB7315FE52F7F2498E4D9C4E0435E7F";

        let result = await contract.pkcs1Sha256VerifyRaw(Msg,S,e,nn);

		expect(result).to.eq(0);
	});

	it("test wrong values", async () => {
		const e   = "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001";
        const Msg = "0x68656c6c6f20776f726c64";
        const S   = "0x3920c459a0dd65305c25c249b53c4c33438ce21cf362c1c62c9508f7f4f5551a712e266100b10f843832697002a67ea4c8efb9bc2264d80e0964c9c06004e629b4ec77ffefe6a929e044a1c1d3ecd23fc54359cac90179bb1acbc45f6816e41afb5ce8960d4a0aec158e3733bd3859a727c5dbc977c8c762d3043d949176d789";
        const nn  = "0xE15568ECDF47FAA2AAD9B7D2777025F972297D2D64D8A190E700CBA133DC2C26CC4CD62EC728E757891CDC1F770E02EB55746B26EE2FCF8275614CA9A73DCF85E9F2BF5652C853440837AD1A5C6659E099E2E3CED568722FF659268CC35D0F9774A78A5C013F1DC1999873EF8842F6AF3AB7315FE52F7F2498E4D9C4E0435E7F";

        let result = await contract.pkcs1Sha256VerifyRaw(Msg,S,e,nn);

		expect(result).to.eq(1);
	});

	it("test with 2048 private key values", async () => {
		const e   = "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010001";
        const Msg = "0x68656c6c6f20776f726c64";
        const S   = "0x6e13c84317ec0b3ff8674c7754fcff865754b5908d38df7960db26dc9477e9582b6e17473ca7007438d8f223b6b1ba5b8d165d00b461bf4afdfdf4f572407c6299f9c1ce3dc4a63adf6c86b9d933f6e9fa99a3dd01cc1c8ec77ad2e7d2220b072e818c6460b326dcaf498d9bb4076e91b5443fb55e9358041bdc476b215a377f8417ef213971630ed22daa7e79612943f6d46365e5861af4f1a309933eca315147b3327e8e98a1968996b8393d911c34dcca21bfb4c5587064e79d7228aabc5de8cf9ec7543ee34ca0f9a226902f5460ba9b87abab720c678b5cea839d547100fb2c42f3c8843525a42672425e81409b9da2bf3177b27d930d17eb0736738d81";
        const nn  = "0xA697E22F5D5D2E1A501BCEB7B4A4B2D877AEE31BAC235451A78A9D954D79F142B608E1964DA2342869D75546D06727C9921F5F60C840A2083926C0DDEDBE4D3869AF4380017A4558A90B6595E127839D3B8DB2B7DA0C1D6BC55A8B535FA3F19E48831794ABE12B30006D5CB25AF02DADAEF6E5108628417D01EF9AE156180F1BF25665365A2E4EE4D2D699BB4F1392175D14B456B70CDA1E36415C7089B4E2F8AEB02FFAC4525B81CB8FEDA7F9B554F08ECA0AE44743218390A6CEF03E716C1D3A137032FF7FDAD60455DAF1ED5B45B028434DD0579299886768245CB6FA74B0F066756EC60E09746148C7AE50EE0572E40DEECFFD8E4EAE332E604ACEC45857";

        let result = await contract.pkcs1Sha256VerifyRaw(Msg,S,e,nn);

		expect(result).to.eq(0);
	});

});